#!/bin/bash
#
# Enable/Disable User account for mydlink service
#
# Writed by Linda Hu <linda.hu@dlinkcorp.com>
#
# 2016/09/13 Initial Version
# 2018/07/28 Change: log PERMISSION by logger
# 2019/08/22 Feature: Add 'chage' to lock or unlock account when account is NOLOGING or not.
# 	     Feature: Add 'force logout' mechanism when 'stop'.
#

# Source function library
if [ -f /etc/rc.d/init.d/functions ]; then
. /etc/rc.d/init.d/functions
elif [ -f /etc/init.d/functions ]; then
. /etc/init.d/functions
elif [ -f /etc/rc.d/functions ]; then
. /etc/rc.d/functions
else
# Log that something succeeded
success() {
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_success
  return 0
}
# Log that something failed
failure() {
  local rc=$?
  [ "$BOOTUP" != "verbose" -a -z "${LSB:-}" ] && echo_failure
  [ -x /bin/plymouth ] && /bin/plymouth --details
  return $rc
}
echo_success() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_SUCCESS
  echo -n $"  OK  "
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 0
}
echo_failure() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_FAILURE
  echo -n $"FAILED"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}
fi

USERTARGET={{ userid }}
#NOLOGINSHELL=`which nologin`
NOLOGINSHELL='/bin/false'
CHAGE='/usr/bin/chage'
PGREP="/usr/bin/pgrep"
WC="/usr/bin/wc"
PKILL="/usr/bin/pkill"

if [ -s '/sbin/nologin' ]; then
  NOLOGINSHELL='/sbin/nologin'
elif [ -s '/usr/sbin/nologin' ]; then
  NOLOGINSHELL='/usr/sbin/nologin'
fi

HOSTNAME=`/bin/hostname -s`
COUNT=`grep -c $USERTARGET /etc/sudoers`
COUNTROOT=`grep $USERTARGET /etc/sudoers | grep root | grep -c ALL`
SUDOFILE="/etc/sudoers.d/$USERTARGET"
if [ ! -e $SUDOFILE ]
then
  PRECOUNT=0
else
  PRECOUNT=`grep -c $USERTARGET /etc/sudoers.d/$USERTARGET`
fi
STATUS=`grep $USERTARGET /etc/passwd|grep -c bash`
RETVAL=0
# See how we were called.
case "$1" in
  start)
        # Start daemons.
        echo -n "Enabling $USERTARGET account: "
	if [ $COUNT -eq 0 ] && [ $PRECOUNT -eq 0 ]
	then
  	  echo -e "$USERTARGET\t\tALL=(root)\tREADONLY" >> /etc/sudoers
	fi
	# UNLOCK account
	${CHAGE} -E -1 ${USERTARGET}
	sed -i "/$USERTARGET/{s|/usr/sbin/nologin|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|/sbin/nologin|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|/bin/false|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|${NOLOGINSHELL}|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|${USERTARGET}:$|${USERTARGET}:/bin/bash|}" /etc/passwd
	/usr/bin/logger -t "PERMISSION ${SUDO_USER}:$(whoami)" -i -p authpriv.info "Enable permission - READONLY for $USERTARGET"
	if [ $? -eq 0 ]
	then
	   	success
	else
	   	failure
        	RETVAL=$?
	fi
        echo
        ;;

  startroot)
    # Start daemons for not MP site
    if [[ "$ENVIRONMENT" == "production" ]]; then
        echo -n "Enabling $USERTARGET account for root (NOT allow in MP site): "
        failure
        RETVAL=1
    else
        echo -n "Enabling $USERTARGET account for root privileges: "
	if [ $COUNTROOT -eq 0 ]
	then
  	        echo -e "$USERTARGET\t\tALL=(root)\tALL" >> /etc/sudoers
		/usr/bin/logger -t "PERMISSION ${SUDO_USER}:$(whoami)" -i -p authpriv.info "Enable permission - ROOT for $USERTARGET"
        fi
	# UNLOCK account
	${CHAGE} -E -1 ${USERTARGET}
	sed -i "/$USERTARGET/{s|/usr/sbin/nologin|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|/sbin/nologin|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|/bin/false|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|${NOLOGINSHELL}|/bin/bash|}" /etc/passwd
	sed -i "/$USERTARGET/{s|${USERTARGET}:$|${USERTARGET}:/bin/bash|}" /etc/passwd
	if [ $? -eq 0 ]
	then
	       success
	else
		failure
        	RETVAL=$?
	fi
    fi
    echo
    ;;

  stop)
	NOLOGINCOUNT=`grep "^${USERTARGET}:" /etc/passwd | grep -c 'nologin'`
	# Stop daemons.
	echo -n "Disabling $USERTARGET account: "
	# FORCE LOGOUT if user has logged in
	USER_SESSIONS=$($PGREP --euid $USERTARGET | $WC -l)
	if [[ "${USER_SESSIONS}" > 0 ]]; then
	    ### Kill specificed user processes ###
	    echo -en "Force logout ${USERTARGET}: "
	    /usr/bin/logger -t "PERMISSION ${SUDO_USER}:$(whoami)" -i -p authpriv.info "Force logout $USERTARGET for ${USER_SESSIONS} sessions"
	    $PKILL -KILL --euid $USERTARGET
	    if [[ $? -eq 0 ]]; then
		success
	    else
		failure
	    fi
	fi
	# LOCK account
	${CHAGE} -E 0 ${USERTARGET}
	sed -i "/^$USERTARGET/d" /etc/sudoers
	sed -i "/$USERTARGET/{s|/bin/bash|${NOLOGINSHELL}|}" /etc/passwd
	sed -i "/$USERTARGET/{s|${USERTARGET}:$|${USERTARGET}:${NOLOGINSHELL}|}" /etc/passwd
	if [ $? -eq 0 ]
	then
        if [ $NOLOGINCOUNT  -eq 0 ]
        then
	    /usr/bin/logger -t "PERMISSION ${SUDO_USER}:$(whoami)" -i -p authpriv.info "Disable permission for $USERTARGET"
        fi
	   	success
	else
	   	failure
        	RETVAL=$?
	fi
        echo
        ;;
  status)
	if [ $STATUS -eq 1 ] && [ $COUNTROOT -eq 1 ]
	then
          echo -n "$USERTARGET is enabled with root  "
	elif [ $STATUS -eq 1 ]
	then
          echo -n "$USERTARGET is enabled  "
	elif [ $STATUS -gt 1 ]
	then
          echo -n "$USERTARGET is enabled [$STATUS] "
	else
          echo -n "$USERTARGET is disabled "
          RETVAL=3
	fi
	echo
	;;
  *)
        echo "Usage: enable_${USERTARGET} {start|stop|status}"
        RETVAL=2
esac

exit $RETVAL

